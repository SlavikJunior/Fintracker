@file:JvmName("KotlinExtensionsFunctions")

package com.slavikjunior.liba.utils

import com.slavikjunior.liba.annotations.Column
import com.slavikjunior.liba.annotations.Id

fun Any.toFieldMapByColumnNames(): Map<String, Any?> {
    return this::class.java.declaredFields.associate { field ->
        field.isAccessible = true
        val name = field.annotations.find { it is Column }.let { it as Column }.name
        name to field.get(this)
    }
}

fun Class<*>.isNullableColumn(columnName: String): Boolean {
    val fields = this.declaredFields.toList()
    fields.forEach {it.isAccessible = true}
    val annotatedFields = fields.filter { field -> field.declaredAnnotations.any { it is Column } }
    val columns = annotatedFields.map { field -> field.getAnnotation(Column::class.java) }
    return columns.find { it.name == columnName }?.nullable ?: false
}

fun Class<*>.isFieldAutogenerated(columnLabel: String): Boolean {
    val field = this.declaredFields
        .find { field ->  field.isAnnotationPresent(Id::class.java) and field.isAnnotationPresent(Column::class.java) }
    val id = field?.annotations?.find { it is Id } as Id
    val column = field?.annotations?.find { it is Column } as Column
    return id.autogenerated && column.name == columnLabel
}