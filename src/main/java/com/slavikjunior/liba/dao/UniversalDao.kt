package com.slavikjunior.liba.dao

import com.slavikjunior.liba.annotations.*
import com.slavikjunior.liba.db_manager.DbConnectionManager
import com.slavikjunior.liba.exceptions.DbAccessException
import com.slavikjunior.liba.exceptions.NotNullableColumnException
import com.slavikjunior.liba.orm.Dao
import com.slavikjunior.liba.utils.isFieldAutogenerated
import com.slavikjunior.liba.utils.isNullableColumn
import java.sql.*

internal class UniversalDao<T : Any>(
    private val typeParameterClass: Class<T>
) : Dao<T> {

    private var tableName: String? = null

    private val connection: Connection
        get() = DbConnectionManager.getConnection()

    @CreateMethod
    @Throws(DbAccessException::class, NotNullableColumnException::class)
    override fun createEntity(columnsToValues: Map<String, Any?>): Boolean {
        val columnsList = mutableListOf<String>()
        val valuesList = mutableListOf<Any?>()

        for (entry in columnsToValues.entries) {
            val column = entry.key
            val value: Any? = entry.value

            // Не вставляем автогенерируемое поле
            if (typeParameterClass.isFieldAutogenerated(column))
                continue

            columnsList.add(column)
            valuesList.add(value)
        }

        val columns = columnsList.toTypedArray()
        val values = valuesList.toTypedArray()

        var index = 0
        val sb = StringBuilder("insert into " + tableName + " (")
        for (column in columns) {
            sb.append(column)
            if (index++ < columnsList.size - 1) sb.append(", ")
        }
        sb.append(") values (")

        index = 0
        while (index++ < values.size - 1) {
            sb.append("?").append(", ")
        }
        sb.append("?").append(");")


        index = 1
        connection.use { connection ->
            connection.prepareStatement(sb.toString()).use { ps ->
                for (value in values) {
                    if (value == null) {
                        val isNullableColumn = typeParameterClass.isNullableColumn(
                            columns[index - 1]
                        )
                        if (isNullableColumn) ps.setNull(index++, Types.NULL)
                        else throw NotNullableColumnException("Column " + columns[index - 1] + " is not nullable")
                    } else if (value is String) ps.setString(index++, value)
                    else if (value is Int) ps.setInt(index++, value)
                    else ps.setObject(index++, value)
                }
                try {
                    return ps.executeUpdate() > 0
                } catch (e: SQLException) {
                    throw DbAccessException("Database access error occurs.", e)
                }
            }
        }
    }

    @ReadMethod
    @Throws(SQLException::class)
    override fun readEntityByValues(columnsToValues: Map<String, Any?>): List<T>? {
        var index = 0
        val sb = StringBuilder("select * from " + tableName + " where ")
        for (entry in columnsToValues.entries) {
            val columnName = entry.key
            val value = entry.value
            sb.append(columnName)
            if (value == null)
                sb.append(" is null")
            else
                sb.append(" = ?")
            if (index < columnsToValues.size - 1) sb.append(" and ")
            index++
        }
        sb.append(';')

        var result: List<T>? = null
        connection.prepareStatement(sb.toString()).use { ps ->
            val values = columnsToValues.values.stream().filter { it != null }.toArray()
            index = 1
            for (value in values) {
                when (value) {
                    is String -> ps.setString(index++, value)
                    is Int -> ps.setInt(index++, value)
                    else -> ps.setObject(index++, value)
                }
            }
            ps.executeQuery().use { rs -> result = createInstanceByResultSet(rs) }
        }
        return result
    }

    @UpdateMethod
    @Throws(SQLException::class)
    override fun updateEntityByValues(id: Int, columnsToValues: Map<String, Any?>): Boolean {
        var index = 0
        val sb = StringBuilder("update " + tableName + " set ")
        for (entry in columnsToValues.entries) {
            val columnName = entry.key
            sb.append(columnName).append(" = ?")
            if (index < columnsToValues.size - 1)
                sb.append(", ")
            index++
        }
        sb.append(" where id = ?;")

        var count = 0
        connection.prepareStatement(sb.toString()).use { ps ->
            val values = columnsToValues.values.stream()
            index = 1
            for (value in values) {
                when (value) {
                    is String -> ps.setString(index++, value)
                    is Int -> ps.setInt(index++, value)
                    null -> ps.setNull(index++, Types.NULL)
                    else -> ps.setObject(index++, value)
                }
            }
            // "where id = ? -> where id = $id"
            ps.setInt(index++, id)
            count = ps.use { ps ->
                ps.executeUpdate()
            }
            return count > 0
        }
    }

    @DeleteMethod
    @Throws(DbAccessException::class)
    override fun deleteEntityByValues(columnsToValues: Map<String, Any?>): Boolean {
        var index = 0
        val sb = StringBuilder("delete from " + tableName + " where ")
        for (entry in columnsToValues.entries) {
            val columnName = entry.key
            val value = entry.value

            sb.append(columnName)
            if (value != null)
                sb.append(" = ?")
            else
                sb.append(" is null")
            if (index++ < columnsToValues.size - 1) sb.append(" and ")
        }
        sb.append(';')

        val ps: PreparedStatement
        val values = columnsToValues.values.stream().filter { it != null }.toArray()
        var cntOfChangedRows = 0
        connection.use { connection ->
            ps = connection.prepareStatement(sb.toString())
            index = 1
            for (value in values) {
                when (value) {
                    is String -> ps.setString(index++, value)
                    is Int -> ps.setInt(index++, value)
                    null -> ps.setNull(index++, Types.NULL)
                    else -> ps.setObject(index++, value)
                }
            }
            ps.use { ps ->
                cntOfChangedRows = ps.executeUpdate()
            }
        }
        return cntOfChangedRows > 0
    }

    private fun createInstanceByResultSet(rs: ResultSet): List<T>? {
        val rsmd = rs.metaData
        val columnCount = rsmd.columnCount

        val result = mutableListOf<T>()
        // todo добавить поддержку возврата множества объектов
        while (rs.next()) {
            val initArgs = mutableListOf<Any?>()
            for (i in 1..columnCount) {
                val type = rsmd.getColumnClassName(i)
                val label = rsmd.getColumnLabel(i)

                // todo добавить обработку типов
                initArgs += when (type) {
                    String::class.java.name -> rs.getString(label)
                    Integer::class.java.name -> rs.getInt(label)
                    Object::class.java.name -> rs.getObject(label)
                    else -> {}
                }
            }
            result.add(typeParameterClass.constructors[0].newInstance(*initArgs.toTypedArray()) as T)
        }
        return if (result.size != 0) result else null
    }

    private fun getTableName(): String {
        if (tableName == null) {
            tableName = typeParameterClass.declaredAnnotations
                .find { annotation -> annotation is Table }
                .let { annotation -> annotation as Table }.name
        }
        return tableName as String
    }
}